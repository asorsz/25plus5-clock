{"version":3,"sources":["components/Controls.js","components/Display.js","components/Timer.js","index.js"],"names":["Controls","props","id","className","onClick","e","handlePlusMinusClick","breakLength","startStop","playing","reset","sessionLength","Display","label","secs","mins","Math","floor","minsPad","rem","remPad","getDisplay","timeLeft","src","preload","Timer","useState","setBreakLength","setSessionLength","timerType","setTimerType","seconds","setSeconds","setPlaying","then","setThen","interval","useRef","useEffect","Date","now","clearInterval","current","setInterval","updateTimer","secondsLeft","round","beep","document","getElementById","currentTime","play","playBeep","target","pause","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b53cdbad.chunk.js","sourcesContent":["import '../css/Controls.css';\r\nimport { AiFillPlusCircle, AiFillMinusCircle, AiFillPlayCircle, AiFillPauseCircle } from 'react-icons/ai';\r\nimport { BiReset } from 'react-icons/bi'\r\n\r\nconst Controls = (props) => {\r\n  return (\r\n    <div id=\"control-banner\">\r\n      <div className=\"control-section\">\r\n        <div id=\"break-label\">Break Length</div>\r\n        <div className=\"controls\">\r\n          <button\r\n            id=\"break-decrement\"\r\n            className=\"plus-minus\"\r\n            onClick={(e) => props.handlePlusMinusClick(e)}\r\n          ><AiFillMinusCircle /></button>\r\n          <div id=\"break-length\">{props.breakLength}</div>\r\n          <button\r\n            id=\"break-increment\"\r\n            className=\"plus-minus\"\r\n            onClick={(e) => props.handlePlusMinusClick(e)}\r\n          ><AiFillPlusCircle /></button>\r\n        </div> \r\n      </div>\r\n      <div className=\"control-section\">\r\n        <div className=\"controls\">\r\n          <button id=\"start_stop\" className=\"play-pause-reset\" onClick={() => props.startStop()}>\r\n            {props.playing ? <AiFillPauseCircle /> : <AiFillPlayCircle />}            \r\n          </button>\r\n          <button id=\"reset\" className=\"play-pause-reset\" onClick={() => props.reset()}><BiReset /></button>\r\n        </div>\r\n      </div>\r\n      <div className=\"control-section\">\r\n      <div id=\"session-label\">Session Length</div>\r\n        <div className=\"controls\">\r\n          <button\r\n            id=\"session-decrement\"\r\n            className=\"plus-minus\"\r\n            onClick={(e) => props.handlePlusMinusClick(e)}\r\n          ><AiFillMinusCircle /></button>\r\n          <div id=\"session-length\">{props.sessionLength}</div>\r\n          <button\r\n            id=\"session-increment\"\r\n            className=\"plus-minus\"\r\n            onClick={(e) => props.handlePlusMinusClick(e)}\r\n          ><AiFillPlusCircle /></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Controls;","import '../css/Display.css';\r\n\r\nconst Display = (props) => {\r\n  const getDisplay = (secs) => {\r\n    const mins = Math.floor(secs / 60);\r\n    const minsPad = mins <= 9 ? `0${mins}` : mins;\r\n    const rem = secs % 60;\r\n    const remPad = rem <= 9 ? `0${rem}` : rem;\r\n    const display = `${minsPad}:${remPad}`;\r\n    return display;\r\n  };\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <div id=\"timer-label\">{props.label}</div>\r\n      <h1 id=\"time-left\">{getDisplay(props.timeLeft)}</h1>\r\n      <audio id=\"beep\" src=\"./audio/beep.wav\" preload=\"auto\"></audio>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Display;","import { useEffect, useState, useRef } from 'react';\nimport '../css/Timer.css';\nimport Controls from './Controls';\nimport Display from './Display';\n\nconst Timer = () => {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [timerType, setTimerType] = useState('Session');\n  const [seconds, setSeconds] = useState(sessionLength * 60);\n  const [playing, setPlaying] = useState(false);\n  const [then, setThen] = useState(null);\n  const interval = useRef(null);\n\n  const reset = () => {\n    setBreakLength(5);\n    setSessionLength(25);\n    setTimerType('Session');\n    setSeconds(1500);\n    setPlaying(false);\n    setThen(null);\n    const beep = document.getElementById('beep');\n    beep.pause();\n    beep.currentTime = 0;\n  };\n    \n  const handlePlusMinusClick = (e) => {\n    if (playing) return;\n    if (e.target.id === 'break-decrement') setBreakLength(\n      breakLength > 1 ? breakLength - 1 : 1\n    );\n    if (e.target.id === 'break-increment') setBreakLength(\n      breakLength < 60 ? breakLength + 1 : 60\n    );\n    if (e.target.id === 'session-decrement') setSessionLength(\n      sessionLength > 1 ? sessionLength - 1 : 1\n    );\n    if (e.target.id === 'session-increment') setSessionLength(\n      sessionLength < 60 ? sessionLength + 1 : 60\n    );\n  };\n\n  const startStop = () => {\n    setPlaying(!playing);\n  };\n\n  const playBeep = () => {\n    const beep = document.getElementById('beep');\n    beep.currentTime = 0;\n    beep.play();  \n  };\n\n  useEffect(() => {\n    if (playing) {\n      setThen(Date.now() + (seconds * 1000));\n    } else {\n      setThen(null)\n    }\n  }, [playing])\n\n  useEffect(() => {\n    clearInterval(interval.current);\n    if (then) interval.current = setInterval(() => updateTimer(), 1000);\n  }, [then])\n\n  const updateTimer = () => {\n    const secondsLeft = Math.round((then - Date.now()) / 1000);\n    if (secondsLeft === 0) playBeep();\n\n    if (secondsLeft < 0 && timerType === 'Session') {\n      setTimerType('Break');\n      setSeconds(breakLength * 60);\n      setThen(Date.now() + (breakLength * 60 * 1000)); \n    } else if (secondsLeft < 0 && timerType === 'Break') {\n      setTimerType('Session');\n      setSeconds(sessionLength * 60);\n      setThen(Date.now() + (sessionLength * 60 * 1000)); \n    } else {\n      setSeconds(secondsLeft);\n    }\n  };\n\n  useEffect(() => {\n    if (!playing) setSeconds(sessionLength * 60);\n  }, [sessionLength]);\n\n  return (\n    <div className=\"timer\">\n      <Controls playing={playing} breakLength={breakLength} sessionLength={sessionLength} handlePlusMinusClick={handlePlusMinusClick} startStop={startStop} reset={reset}/>\n      <Display label={timerType} timeLeft={seconds}/>\n  </div>\n  );\n}\n\nexport default Timer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/Timer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}